buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
        maven { url 'https://repo.spring.io/libs-snapshot/' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
}
plugins {
    id "com.bmuschko.docker-remote-api" version "6.6.1"
    id "org.springframework.boot" version "2.3.5.RELEASE"
    id 'war'
}

ext.junitVersion = "4.12"
ext.geeSpringCloudVersion = "1.1.0.0-RC0"
ext.logbackkafkaVersion = "0.1.0"


apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'io.spring.dependency-management'


repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    mavenCentral()
    jcenter()

}

dependencyManagement {
    imports {
        mavenBom "com.robix.orgmons:gee-deps-spring-boot:"+geeSpringCloudVersion
        mavenBom "com.robix.orgmons:gee-deps-spring-cloud:"+geeSpringCloudVersion
    }
}
dependencies {
    if (!(name.contains('integration-test'))) {
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("junit:junit:"+junitVersion+"")

    }
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
   //compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.cloud:spring-cloud-starter-config"
    compile "org.springframework.cloud:spring-cloud-config-server"
    // compile "org.springframework.cloud:spring-cloud-starter-bus-amqp"
    //compile "org.springframework.cloud:spring-cloud-config-monitor"
}


if (!(name.contains('common') || name.contains('api'))) {
    apply plugin: 'application'
}


docker {
    registryCredentials {
        username = getConfigurationProperty('DOCKER_USERNAME', 'docker.username')
        password = getConfigurationProperty('DOCKER_PASSWORD', 'docker.password')
        email = getConfigurationProperty('DOCKER_EMAIL', 'docker.email')
        //url =""  //docker image仓库地址

    }

}

String getConfigurationProperty(String envVar, String sysProp) {
    System.getenv(envVar) ?: project.findProperty(sysProp)
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

import com.bmuschko.gradle.docker.tasks.image.DockerPushImage


task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jre-alpine'
    environmentVariable 'JAVA_OPTS', '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dspring.profiles.active=production'
    label maintainer: "Robin Wang luobintianya@gmail.com"
    copyFile war.archiveFileName.get(), '/app/' + war.archiveFileName.get()
    entryPoint 'java'
    defaultCommand '-jar', '/app/' + war.archiveFileName.get()
    exposePort 8081 //需要和application.yaml的eureka的port一致
    runCommand 'apk --update --no-cache add curl'
    instruction 'HEALTHCHECK CMD curl -f http://localhost:8081/health || exit 1'
}